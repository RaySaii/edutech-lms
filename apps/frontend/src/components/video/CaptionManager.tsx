'use client';

import React, { useState, useEffect } from 'react';
import { 
  Upload, 
  Download, 
  Edit, 
  Trash2, 
  Plus, 
  Globe, 
  FileText, 
  Settings,
  Play,
  Pause,
  RotateCcw,
  Check,
  X,
  Languages,
  Wand2
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';

interface Caption {
  id: string;
  language: string;
  label: string;
  isDefault: boolean;
  filePath: string;
  format: 'vtt' | 'srt' | 'ass';
  isAutoGenerated: boolean;
  createdAt: string;
}

interface CaptionCue {
  start: number;
  end: number;
  text: string;
}

interface CaptionManagerProps {
  videoId: string;
  onCaptionChange?: (captions: Caption[]) => void;
}

const SUPPORTED_LANGUAGES = [
  { code: 'en', name: 'English', native: 'English' },
  { code: 'es', name: 'Spanish', native: 'Español' },
  { code: 'fr', name: 'French', native: 'Français' },
  { code: 'de', name: 'German', native: 'Deutsch' },
  { code: 'it', name: 'Italian', native: 'Italiano' },
  { code: 'pt', name: 'Portuguese', native: 'Português' },
  { code: 'ru', name: 'Russian', native: 'Русский' },
  { code: 'ja', name: 'Japanese', native: '日本語' },
  { code: 'ko', name: 'Korean', native: '한국어' },
  { code: 'zh', name: 'Chinese', native: '中文' },
];

const SUPPORTED_FORMATS = [
  { format: 'vtt', name: 'WebVTT', description: 'Web Video Text Tracks' },
  { format: 'srt', name: 'SubRip', description: 'SubRip Subtitle' },
  { format: 'ass', name: 'ASS/SSA', description: 'Advanced SubStation Alpha' },
];

export function CaptionManager({ videoId, onCaptionChange }: CaptionManagerProps) {
  const [captions, setCaptions] = useState<Caption[]>([]);
  const [loading, setLoading] = useState(true);
  const [showUploadForm, setShowUploadForm] = useState(false);
  const [showTextEditor, setShowTextEditor] = useState(false);
  const [editingCaption, setEditingCaption] = useState<Caption | null>(null);
  const [isGeneratingAuto, setIsGeneratingAuto] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState('en');
  const [selectedFormat, setSelectedFormat] = useState<'vtt' | 'srt' | 'ass'>('vtt');
  const [uploadFile, setUploadFile] = useState<File | null>(null);
  const [textContent, setTextContent] = useState('');
  const [captionLabel, setCaptionLabel] = useState('');

  useEffect(() => {
    loadCaptions();
  }, [videoId]);

  const loadCaptions = async () => {
    try {
      setLoading(true);
      const response = await fetch(`/api/videos/${videoId}/captions`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        setCaptions(data);
        onCaptionChange?.(data);
      }
    } catch (error) {
      console.error('Failed to load captions:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleFileUpload = async () => {
    if (!uploadFile) return;

    const formData = new FormData();
    formData.append('file', uploadFile);
    formData.append('language', selectedLanguage);
    formData.append('label', captionLabel || `${SUPPORTED_LANGUAGES.find(l => l.code === selectedLanguage)?.name} Captions`);
    formData.append('format', selectedFormat);
    formData.append('isDefault', captions.length === 0 ? 'true' : 'false');

    try {
      const response = await fetch(`/api/videos/${videoId}/captions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
        body: formData,
      });

      if (response.ok) {
        await loadCaptions();
        setShowUploadForm(false);
        setUploadFile(null);
        setCaptionLabel('');
      } else {
        const error = await response.json();
        alert(error.message || 'Failed to upload caption');
      }
    } catch (error) {
      console.error('Failed to upload caption:', error);
      alert('Failed to upload caption');
    }
  };

  const handleTextSubmit = async () => {
    if (!textContent.trim()) return;

    try {
      const response = await fetch(`/api/videos/${videoId}/captions/text`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify({
          language: selectedLanguage,
          label: captionLabel || `${SUPPORTED_LANGUAGES.find(l => l.code === selectedLanguage)?.name} Captions`,
          format: selectedFormat,
          content: textContent,
          isDefault: captions.length === 0,
        }),
      });

      if (response.ok) {
        await loadCaptions();
        setShowTextEditor(false);
        setTextContent('');
        setCaptionLabel('');
      } else {
        const error = await response.json();
        alert(error.message || 'Failed to create caption');
      }
    } catch (error) {
      console.error('Failed to create caption:', error);
      alert('Failed to create caption');
    }
  };

  const generateAutoCaption = async () => {
    setIsGeneratingAuto(true);
    try {
      const response = await fetch(`/api/videos/${videoId}/captions/auto-generate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify({ language: selectedLanguage }),
      });

      if (response.ok) {
        await loadCaptions();
      } else {
        const error = await response.json();
        alert(error.message || 'Failed to generate auto-caption');
      }
    } catch (error) {
      console.error('Failed to generate auto-caption:', error);
      alert('Failed to generate auto-caption');
    } finally {
      setIsGeneratingAuto(false);
    }
  };

  const deleteCaption = async (captionId: string) => {
    if (!confirm('Are you sure you want to delete this caption?')) return;

    try {
      const response = await fetch(`/api/videos/${videoId}/captions/${captionId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });

      if (response.ok) {
        await loadCaptions();
      } else {
        const error = await response.json();
        alert(error.message || 'Failed to delete caption');
      }
    } catch (error) {
      console.error('Failed to delete caption:', error);
      alert('Failed to delete caption');
    }
  };

  const downloadCaption = async (captionId: string, format?: 'vtt' | 'srt' | 'ass') => {
    try {
      const url = format 
        ? `/api/videos/${videoId}/captions/${captionId}/download?format=${format}`
        : `/api/videos/${videoId}/captions/${captionId}/download`;
      
      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });

      if (response.ok) {
        const blob = await response.blob();
        const downloadUrl = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = downloadUrl;
        a.download = response.headers.get('content-disposition')?.split('filename=')[1] || `caption.${format || 'vtt'}`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(downloadUrl);
        document.body.removeChild(a);
      }
    } catch (error) {
      console.error('Failed to download caption:', error);
      alert('Failed to download caption');
    }
  };

  const setAsDefault = async (captionId: string) => {
    try {
      const response = await fetch(`/api/videos/${videoId}/captions/${captionId}/text`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify({ isDefault: true }),
      });

      if (response.ok) {
        await loadCaptions();
      }
    } catch (error) {
      console.error('Failed to set default caption:', error);
    }
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  if (loading) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="animate-pulse space-y-4">
            <div className="h-4 bg-gray-200 rounded w-1/4"></div>
            <div className="space-y-2">
              <div className="h-3 bg-gray-200 rounded"></div>
              <div className="h-3 bg-gray-200 rounded w-5/6"></div>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Languages className="h-5 w-5" />
            Captions & Subtitles
          </CardTitle>
          <div className="flex items-center gap-2">
            <Button
              size="sm"
              variant="outline"
              onClick={generateAutoCaption}
              disabled={isGeneratingAuto}
              className="flex items-center gap-2"
            >
              <Wand2 className="h-4 w-4" />
              {isGeneratingAuto ? 'Generating...' : 'Auto Generate'}
            </Button>
            <Button
              size="sm"
              onClick={() => setShowUploadForm(true)}
              className="flex items-center gap-2"
            >
              <Plus className="h-4 w-4" />
              Add Caption
            </Button>
          </div>
        </div>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Auto Generation Progress */}
        {isGeneratingAuto && (
          <div className="bg-blue-50 p-4 rounded-lg">
            <div className="flex items-center gap-3 mb-2">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
              <span className="text-sm font-medium text-blue-800">
                Generating auto-captions using AI...
              </span>
            </div>
            <Progress value={75} className="h-2" />
            <p className="text-xs text-blue-600 mt-2">
              This may take a few minutes depending on video length.
            </p>
          </div>
        )}

        {/* Existing Captions */}
        {captions.length > 0 ? (
          <div className="space-y-3">
            {captions.map((caption) => (
              <div key={caption.id} className="border rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <Globe className="h-4 w-4 text-gray-500" />
                    <span className="font-medium">{caption.label}</span>
                    <Badge variant="outline" className="text-xs">
                      {caption.language.toUpperCase()}
                    </Badge>
                    <Badge variant="outline" className="text-xs">
                      {caption.format.toUpperCase()}
                    </Badge>
                    {caption.isDefault && (
                      <Badge className="text-xs bg-green-100 text-green-800">
                        Default
                      </Badge>
                    )}
                    {caption.isAutoGenerated && (
                      <Badge variant="outline" className="text-xs bg-blue-100 text-blue-800">
                        Auto-generated
                      </Badge>
                    )}
                  </div>
                  
                  <div className="flex items-center gap-1">
                    {!caption.isDefault && (
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => setAsDefault(caption.id)}
                        className="p-2"
                        title="Set as default"
                      >
                        <Check className="h-3 w-3" />
                      </Button>
                    )}
                    
                    {/* Download dropdown */}
                    <div className="relative group">
                      <Button
                        size="sm"
                        variant="ghost"
                        className="p-2"
                        title="Download"
                      >
                        <Download className="h-3 w-3" />
                      </Button>
                      <div className="absolute right-0 mt-1 w-32 bg-white border border-gray-200 rounded-md shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10">
                        <div className="py-1">
                          <button
                            onClick={() => downloadCaption(caption.id)}
                            className="block w-full px-3 py-2 text-sm text-left text-gray-700 hover:bg-gray-100"
                          >
                            Original ({caption.format.toUpperCase()})
                          </button>
                          {SUPPORTED_FORMATS.filter(f => f.format !== caption.format).map(format => (
                            <button
                              key={format.format}
                              onClick={() => downloadCaption(caption.id, format.format as any)}
                              className="block w-full px-3 py-2 text-sm text-left text-gray-700 hover:bg-gray-100"
                            >
                              Convert to {format.name}
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                    
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => deleteCaption(caption.id)}
                      className="p-2 text-red-600 hover:text-red-700"
                      title="Delete"
                    >
                      <Trash2 className="h-3 w-3" />
                    </Button>
                  </div>
                </div>
                
                <div className="text-sm text-gray-600">
                  Created: {new Date(caption.createdAt).toLocaleDateString()}
                  {caption.isAutoGenerated && (
                    <span className="ml-2 text-blue-600">• AI Generated</span>
                  )}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-8">
            <Languages className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-900 mb-2">No captions yet</h3>
            <p className="text-gray-600 mb-4">
              Add captions to make your video accessible to more viewers
            </p>
            <div className="flex justify-center gap-2">
              <Button
                onClick={generateAutoCaption}
                disabled={isGeneratingAuto}
                className="flex items-center gap-2"
              >
                <Wand2 className="h-4 w-4" />
                Auto Generate
              </Button>
              <Button
                variant="outline"
                onClick={() => setShowUploadForm(true)}
                className="flex items-center gap-2"
              >
                <Upload className="h-4 w-4" />
                Upload File
              </Button>
            </div>
          </div>
        )}

        {/* Upload Form Modal */}
        {showUploadForm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <Card className="w-full max-w-md">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  Add Caption
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowUploadForm(false)}
                    className="p-1"
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Method</label>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setShowUploadForm(false);
                        setShowTextEditor(true);
                      }}
                      className="flex-1"
                    >
                      <FileText className="h-4 w-4 mr-2" />
                      Write Text
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex-1 bg-blue-50 border-blue-200"
                    >
                      <Upload className="h-4 w-4 mr-2" />
                      Upload File
                    </Button>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Language</label>
                  <select
                    value={selectedLanguage}
                    onChange={(e) => setSelectedLanguage(e.target.value)}
                    className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  >
                    {SUPPORTED_LANGUAGES.map(lang => (
                      <option key={lang.code} value={lang.code}>
                        {lang.native} ({lang.name})
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Label (Optional)</label>
                  <input
                    type="text"
                    value={captionLabel}
                    onChange={(e) => setCaptionLabel(e.target.value)}
                    placeholder="e.g., English Captions"
                    className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Format</label>
                  <select
                    value={selectedFormat}
                    onChange={(e) => setSelectedFormat(e.target.value as any)}
                    className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  >
                    {SUPPORTED_FORMATS.map(format => (
                      <option key={format.format} value={format.format}>
                        {format.name} - {format.description}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Caption File</label>
                  <input
                    type="file"
                    accept=".vtt,.srt,.ass,.ssa"
                    onChange={(e) => setUploadFile(e.target.files?.[0] || null)}
                    className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Supported formats: VTT, SRT, ASS/SSA
                  </p>
                </div>

                <div className="flex justify-end gap-2">
                  <Button
                    variant="outline"
                    onClick={() => setShowUploadForm(false)}
                  >
                    Cancel
                  </Button>
                  <Button
                    onClick={handleFileUpload}
                    disabled={!uploadFile}
                    className="bg-purple-600 hover:bg-purple-700"
                  >
                    Upload Caption
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Text Editor Modal */}
        {showTextEditor && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <Card className="w-full max-w-2xl max-h-[80vh] overflow-hidden">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  Write Caption Text
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowTextEditor(false)}
                    className="p-1"
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 overflow-y-auto">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Language</label>
                    <select
                      value={selectedLanguage}
                      onChange={(e) => setSelectedLanguage(e.target.value)}
                      className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                    >
                      {SUPPORTED_LANGUAGES.map(lang => (
                        <option key={lang.code} value={lang.code}>
                          {lang.native}
                        </option>
                      ))}
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-2">Format</label>
                    <select
                      value={selectedFormat}
                      onChange={(e) => setSelectedFormat(e.target.value as any)}
                      className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                    >
                      {SUPPORTED_FORMATS.map(format => (
                        <option key={format.format} value={format.format}>
                          {format.name}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Label (Optional)</label>
                  <input
                    type="text"
                    value={captionLabel}
                    onChange={(e) => setCaptionLabel(e.target.value)}
                    placeholder="e.g., English Captions"
                    className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Caption Content</label>
                  <textarea
                    value={textContent}
                    onChange={(e) => setTextContent(e.target.value)}
                    placeholder={`Example ${selectedFormat.toUpperCase()} format:\n\n${selectedFormat === 'vtt' ? 'WEBVTT\n\n1\n00:00:01.000 --> 00:00:05.000\nHello, welcome to our video.\n\n2\n00:00:05.000 --> 00:00:10.000\nThis is an example caption.' : selectedFormat === 'srt' ? '1\n00:00:01,000 --> 00:00:05,000\nHello, welcome to our video.\n\n2\n00:00:05,000 --> 00:00:10,000\nThis is an example caption.' : 'Dialogue: 0,0:00:01.00,0:00:05.00,Default,,0,0,0,,Hello, welcome to our video.'}`}
                    className="w-full h-64 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 font-mono text-sm"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Enter your caption content in {selectedFormat.toUpperCase()} format
                  </p>
                </div>

                <div className="flex justify-end gap-2">
                  <Button
                    variant="outline"
                    onClick={() => setShowTextEditor(false)}
                  >
                    Cancel
                  </Button>
                  <Button
                    onClick={handleTextSubmit}
                    disabled={!textContent.trim()}
                    className="bg-purple-600 hover:bg-purple-700"
                  >
                    Create Caption
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </CardContent>
    </Card>
  );
}